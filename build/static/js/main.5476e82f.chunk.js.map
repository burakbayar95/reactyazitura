{"version":3,"sources":["Assets/1-lira-tura.png","Assets/1-lira-yazi.png","components/Coin/Coin.js","components/CoinFlipper/CoinFlipper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Coin","props","react_default","a","createElement","className","concat","flipping","src","CoinTura","side","CoinYazi","CoinFlipper","_this","Object","classCallCheck","this","_super","call","handleClick","yazitura","random","Math","floor","length","setState","donus","state","yazituradurumu","yazisayisi","turasayisi","setTimeout","components_Coin_Coin","onClick","Component","App","components_CoinFlipper_CoinFlipper","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kTCuBzBC,EAlBF,SAACC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,QAAAC,OAAUL,EAAMM,SAAW,cAAgB,KACvDL,EAAAC,EAAAC,cAAA,OACEI,IAAKC,IACLJ,UAA0B,SAAfJ,EAAMS,KAAkB,YAAc,eAGnDR,EAAAC,EAAAC,cAAA,OACEI,IAAKG,IACLN,UAA0B,SAAfJ,EAAMS,KAAkB,aAAe,iBCyC7CE,2DAnDb,SAAAA,EAAYX,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAI,EAAAC,KAAAF,KAAMf,IAeRkB,YAAc,WAEZ,IAAIC,EAAS,CAAC,OAAO,QACjBC,EAAOC,KAAKC,MAAMD,KAAKD,SAASD,EAASI,QAC7CX,EAAKY,SAAS,CAACC,MAAQb,EAAKc,MAAMD,MAAS,IAC3C,IAAIE,EAAeR,EAASC,GACP,SAAjBO,GAAyBf,EAAKY,SAAS,CAACI,WAAahB,EAAKc,MAAME,WAAc,IAC7D,SAAjBD,GAAyBf,EAAKY,SAAS,CAACK,WAAajB,EAAKc,MAAMG,WAAc,IAIlFjB,EAAKY,SAAS,CAAElB,UAAU,EAAMG,KAAKkB,IAGrCG,WAAW,kBAAMlB,EAAKY,SAAS,CAAElB,UAAU,KAAU,MAxBrDM,EAAKc,MAAQ,CACXjB,KAAM,GACNH,UAAU,EACVmB,MAAO,EACPG,WAAY,EACZC,WAAY,GAXGjB,uDAmCjB,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAC4B,EAAD,CAAMtB,KAAMM,KAAKW,MAAMjB,KAAMH,SAAUS,KAAKW,MAAMpB,WAClDL,EAAAC,EAAAC,cAAA,UAAQ6B,QAASjB,KAAKG,aAAtB,6BACAjB,EAAAC,EAAAC,cAAA,mBACOF,EAAAC,EAAAC,cAAA,kBAAUY,KAAKW,MAAMD,MAArB,KADP,qBAEExB,EAAAC,EAAAC,cAAA,kBAAUY,KAAKW,MAAMG,WAArB,KAFF,UAEmD5B,EAAAC,EAAAC,cAAA,QAAMC,UAA6B,SAAlBW,KAAKW,MAAMjB,KAAgB,OAAO,IAAnD,QACjDR,EAAAC,EAAAC,cAAA,kBAAUY,KAAKW,MAAME,WAArB,MAHF,WAGqD3B,EAAAC,EAAAC,cAAA,QAAMC,UAA6B,SAAlBW,KAAKW,MAAMjB,KAAgB,OAAO,IAAnD,aAHrD,mBA1CkBwB,cCQXC,MARf,WACE,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5476e82f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1-lira-tura.7c42669a.png\";","module.exports = __webpack_public_path__ + \"static/media/1-lira-yazi.9b70882e.png\";","import React from \"react\";\r\nimport \"./Coin.css\";\r\nimport CoinTura from \"../../Assets/1-lira-tura.png\";\r\nimport CoinYazi from \"../../Assets/1-lira-yazi.png\";\r\n\r\nconst Coin = (props) => {\r\n  return (\r\n    <div className=\"Coin-container\">\r\n      <div className={`Coin ${props.flipping ? \"Coin-rotate\" : \"\"}`}>\r\n        <img\r\n          src={CoinTura}\r\n          className={props.side === \"yazi\" ? \"Coin-back\" : \"Coin-front\"}\r\n          \r\n        />\r\n        <img\r\n          src={CoinYazi}\r\n          className={props.side === \"yazi\" ? \"Coin-front\" : \"Coin-back\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Coin;\r\n","import React, { Component } from \"react\";\r\nimport Coin from \"../Coin/Coin\";\r\nimport \"./CoinFlipper.css\";\r\n\r\nclass CoinFlipper extends Component {\r\n \r\n  constructor(props) {\r\n    super(props);\r\n    \r\n   \r\n    // State üzerinde paranın başlangıçtaki durumunu veriyoruz, başlangıçta \"tura\" olsun.\r\n    // Daha sonra şu anda paranın dönüp dönmeme durumunu da veriyoruz, başlangıçta para atılmamış olduğundan \"false\" olarak verdik.\r\n    this.state = {\r\n      side: \"\",\r\n      flipping: false,\r\n      donus: 0,\r\n      yazisayisi: 0,\r\n      turasayisi: 0\r\n    };  \r\n    ;\r\n  }\r\n  \r\n  handleClick = () => {\r\n   \r\n    var yazitura=[\"yazi\",\"tura\"];\r\n    var random=Math.floor(Math.random()*yazitura.length);\r\n    this.setState({donus: (this.state.donus) + 1})\r\n    var yazituradurumu=yazitura[random];\r\n    if (yazituradurumu===\"yazi\"){this.setState({yazisayisi: (this.state.yazisayisi) + 1})}\r\n    if (yazituradurumu===\"tura\"){this.setState({turasayisi: (this.state.turasayisi) + 1})}\r\n \r\n\r\n    // \"At!\" butonuna tıkladığımızda paranın dönmesini istiyoruz, bu yüzden \"flipping\" durumunu \"true\" yapıyoruz.\r\n    this.setState({ flipping: true, side:yazituradurumu});\r\n  \r\n    // 1 saniye kadar dönmesi yeterli, bu yüzden 1 saniye sonra \"flipping\" durmunu tekrar \"false\" yapıyoruz.\r\n    setTimeout(() => this.setState({ flipping: false }), 1000);\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CoinFlipper\">\r\n        <h1>Yazı mı Tura mı?</h1>\r\n        <Coin side={this.state.side} flipping={this.state.flipping} />\r\n        <button onClick={this.handleClick}>Hadi At.. Bol Şans !</button>\r\n        <p> \r\n        Toplam <strong> {this.state.donus} </strong> atıştan\r\n          <strong> {this.state.turasayisi} </strong>tanesi <span className={this.state.side===\"tura\" ? \"glow\":\"\"}>Tura</span>  \r\n          <strong> {this.state.yazisayisi}  </strong> tanesi <span className={this.state.side===\"yazi\" ? \"glow\":\"\"}>Yazı</span> geldi.\r\n        </p>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CoinFlipper;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport CoinFlipper from \"./components/CoinFlipper/CoinFlipper\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CoinFlipper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}